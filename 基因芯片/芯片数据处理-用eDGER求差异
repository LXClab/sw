workdir <- "E:/ym-px/芯片"
setwd(workdir)
if (!require("BiocManager", quietly = TRUE))
    install.packages("BiocManager")
BiocManager::install()
BiocManager::install("GEOquery")
library(GEOquery)
library(Biobase)
BiocManager::install("affy")
library(affy)
library(RColorBrewer)


#### 下载文件
#方法一
data<-getGEOSuppFiles("GSE66229",baseDir = workdir)
# 生成文件列表，以便批量导入文件
library(affy)
cels <- list.files(paste(workdir,"/GSE66229_RAW",sep = ''),
                   pattern="*.gz",full.names =TRUE)
# 读取CEL文件，将其处理成AffyBatch对象
celfiles <- ReadAffy(filenames=cels)
cols <-brewer.pal(8,"Set1")
par(mfrow=c(1,1))
#柱状图
boxplot(celfiles, col=cols)


###标准化
# 将AffyBatch对象转换为ExpressionSet对象,对数据进行标准化
data.rma <- rma(celfiles)
#表达矩阵
data.eset <- exprs(data.rma) 
dim(data.eset)
data.eset[1:3,1:3]
boxplot(data.eset, col=cols)


##对进行标化之后的数据进行探针过滤
# list中的eset为过滤后的ExpressionSet，filter.log为每一步过滤到多少探针的记录
genefilter
install.packages("genefilter")
library(genefilter)
celfiles.filtered <- nsFilter(data.rma, require.entrez=FALSE, remove.dupEntrez=FALSE)
celfiles.filtered
celfiles.filtered$filter.log 
celfiles.filtered$eset
# 获得过滤后的表达量矩阵;
eset <- exprs(celfiles.filtered$eset)
dim(data.eset)
dim(eset)
colnames(eset) <- sub(".CEL.gz","",colnames(eset))
eset[1:4,1:4]



#下载数据的方法二
#Sys.setenv("VR00M_CONNECTION_SIZE"=131072*4)
gset <- getGEO('GSE66229', destdir=".",
               AnnotGPL = T,     ## 注释文件
               getGPL = T)       ## 平台文件
##获取探针和基因对应信息			   
GPL<-fData(gset[[1]])
gpl<-GPL[,c(1,3)]
head(gpl)
write.table(gpl,"./GSE66229_RAW/gse66229_probe.csv",
            col.names=T,row.names=F,quote=F)
##获取表达矩阵
expt<-exprs(gset[[1]])
expt[1:4,1:4]
boxplot(expt, col=cols)
##显示平台信息
gset[[1]]
## 获取临床信息
cli<-pData(gset[[1]])
cli[1:4,1:4]
write.table(cli,"./GSE66229_RAW/gse66229_phe.csv",
            col.names=T,row.names=F,quote=F)

boxplot(expt, col=cols)


#方法三
expt<-read.table(file="GSE66229_series_matrix2.txt",
                 header=T,row.names=1)
expt[1:3,1:4]
GPL<-getGEO(filename="GSE66229_family.soft.gz")
gpl=GPL@gpls[[1]]@dataTable@table
colnames(gpl) 
gpl<-gpl[,c(1,11)]
head(gpl)

###探针注释
row<-as.data.frame(rownames(expt))
colnames(row)<-c("ID")
expt2<-cbind(row,expt)
expt3<-merge(gpl,expt2,by="ID")
expt3[1:4,1:6]
exp_symbol<-na.omit(expt3)
dim(exp_symbol)
exp_symbol[1:3,1:4]
table(duplicated(exp_symbol[,2]))
library(limma)
#对相同的基因的表达取平均
exp_unique<-avereps(exp_symbol[,-1],ID=exp_symbol[,2])
dim(exp_unique)
exp_unique[1:3,1:4]
write.table(exp_unique,"./GSE66229_RAW/gse66229_exp.csv",
            sep=",",col.names=T,row.names=F,quote=F)


########差异基因计算
workdir <- "E:/ym-px/芯片"
setwd(workdir)
dat<-read.csv("./GSE66229_RAW/gse66229_exp.csv",header=T,row.names=1)
#剔除低表达的数据。比如一行中0值太多的数。
#rowMeans() 函数用于找出 DataFrame 、矩阵或数组的每一行的均值
exp<-10^dat
exp2<-exp[rowMeans(exp)>1,]
exp2[1:4,1:4]
dim(dat)
dim(exp2)
#提取临床样本号
#group<-as.data.frame(cli[,1])
group<-read.csv("./GSE66229_RAW/GSE66229_phe2.csv",sep=",",header=T)
colnames(group)[1]<-c("group")
#临床样本号中含"T"字符的为tumor
group_list<-ifelse(grepl("T",group[,1]),"tumor","normal")
group_list2<-factor(group_list,levels=c("normal","tumor"))

library(limma)
library(dplyr)
library(DESeq2)
library(edgeR)
library(limma)
#####edgerR
dge<-DGEList(counts=exp2,group=group_list2)##先生成DGElist;group是数据分组信息
dge2<-calcNormFactors(dge)##对因子矫正，默认使用TMM方法进行归一化

#首先根据分组信息构建试验设计矩阵，分组信息中一定要是对照组(normal)在前，处理组在后
design<-model.matrix(~0+group_list2)
rownames(design)<-colnames(dge2)
colnames(design)<-levels(group_list2)##样本分组信息
##估计变异系数，即估计方差；估计内部差异程度，看组间差异是否比内部差异大，如果大，可选为差异基因
dge3<- estimateCommonDisp(dge2)    
dge4<-estimateTagwiseDisp(dge3)    ##计算基因间范围内的离散度 
et<-exactTest(dge4,pair=c("normal","tumor")) ###tumor相当于normal是高表达还是低表达

edg<-data.frame(et)
edg[which(edg$logFC >= 1 &edg$PValue < 0.05),'sig'] <- 'up'
edg[which(edg$logFC <= -1 & edg$PValue < 0.05),'sig'] <- 'down'
edg[which(abs(edg$logFC) <= 1 | edg$PValue >= 0.05),'sig'] <- 'none'
edg[1:3,]
table(edg$logFC)
write.table(edg,"./GSE66229_RAW/gse66229_exp_edger_diff.csv",sep=",",
            col.names=T,row.names=T,quote=F)table(edg$sig)
			
			


#####绘制火山图
library(ggplot2)
p <- ggplot(
  # 数据、映射、颜色
  edg, aes(x = logFC, y = -log10(PValue), colour=sig)) +
  geom_point(alpha=0.4, size=3.5) +
  scale_color_manual(values=c("#546de5", "#d2dae2","#ff4757"))+
  # 坐标轴
  labs(x="log2(fold change)",
       y="-log10 (PValue)")+
  theme_bw()+
  # 图例
  theme(plot.title = element_text(hjust = 0.5), 
        legend.position="right", 
        legend.title = element_blank())
p





#####绘制热图
lim<-read.csv("./GSE66229_RAW/gse66229_exp_edger_diff.csv",sep=",",header=T)
dat<-read.csv("./GSE66229_RAW/gse66229_exp.csv",header=T,row.names=1)

#分别提取10个表达上调、下调、无差异的基因
up<-lim[which(lim$sig=="up"),]
up2<-up[order(-up$logFC),]
down<-lim[which(lim$sig=="down"),]
down2<-down[order(-down$logFC),]
none<-lim[which(lim$sig=="none"),]
none2<-none[order(-none$logFC),]
set.seed(10)
up22<-up2[sample(nrow(up2),10),]
none22<-none2[sample(nrow(none2),10),]
down22<-down2[sample(nrow(down2),10),]
heat<-rbind(up22,down22,none22)

map<-dat[match(rownames(heat),rownames(dat)),]

#group<-as.data.frame(cli[,1])
group<-read.csv("./GSE66229_RAW/GSE66229_phe2.csv",sep=",",header=T)
colnames(group)[1]<-c("group")
group_list<-ifelse(grepl("T",group[,1]),"tumor","normal")
annotation_c<-data.frame(group_list)
rownames(annotation_c)<-colnames(map)
head(annotation_c)
library(pheatmap)
pheatmap(map, cluster_rows = F,      #行聚类，列不聚类
                 show_rownames = T,      #不显示行名
                 show_colnames = F,      #显示列明 
                 annotation_col = annotation_c,  #对列进行注释即对列进行分组
                 scale="row",             #将数据按行进行标准化
                cellwidth=1 ,         #设置格子大小 cellheigt=""设置格子高
                cellheight = 12,         #设置格子高
                border=T,               #不显示小格子边框

color = colorRampPalette(colors = c("blue","white","red"))(100) )  

####GO富集，KEGG富集
#rm(list=ls())
data<-read.csv("./GSE66229_RAW/gse66229_exp_edger_diff.csv",
               sep=",",header=T)
gene<-as.data.frame(rownames(data[which(data$sig!="none"),]))
colnames(gene)[1]<-c("gene")
#dim(data)
#table(data$sig)
#dim(gene)
library(tidyr)
library(tibble)
gene2<-gene %>% as_tibble() %>% 
  separate_rows(gene, sep = "///")
gene3<-as.matrix(gene2)
#基因ID转换
##下载人类基因注释包
#BiocManager::install("org.Hs.eg.db")
library(org.Hs.eg.db)
library("clusterProfiler")
#keytypes(org.Hs.eg.db)
gene33<-as.character(gene3)
geneid<- bitr(gene33, fromType = "SYMBOL",
                toType = c("ENTREZID"), 
                OrgDb = org.Hs.eg.db)
head(geneid)



##GO富集分析
re_go<- enrichGO(geneid$ENTREZID,
                OrgDb = org.Hs.eg.db,
                pvalueCutoff =0.05,
                qvalueCutoff = 0.05,
                ont="all",
                readable =T)
head(re_go)
write.csv(re_go,"./GSE66229_RAW/GSE66229_GO.csv",row.names=FALSE)
library(ggplot2)
library(DOSE)
barplot(re_go, showCategory = 10,color = "pvalue")

###KEGG
#install.packages("R.utils")
#R.utils::setOption("clusterProfiler.download.method",'auto') 
re_kegg<- enrichKEGG(geneid$ENTREZID,
                 organism = "hsa",
                 pvalueCutoff =0.05,
                 qvalueCutoff =0.05)
eKEGG <- setReadable(re_kegg, OrgDb = org.Hs.eg.db, keyType="ENTREZID")
head(re_kegg)
head(eKEGG)
write.csv(eKEGG,"./GSE66229_RAW/GSE66229_KEGG.csv",row.names=FALSE)

barplot(eKEGG, showCategory = 10,color = "pvalue")



